package com.kentropy.db;

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.StringReader;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Logger;
import com.kentropy.model.*;
import com.kentropy.process.*;
import com.kentropy.process.Process;

import com.kentropy.sync.ChangeLog;
import com.kentropy.transfer.Client;

//import dbconnection.DBConnection;

//import dbconnection.DBConnection;

import net.xoetrope.optional.data.sql.*;
import net.xoetrope.data.*;
import net.xoetrope.optional.data.*;
import net.xoetrope.xml.XmlElement;
import net.xoetrope.xml.XmlSource;
import net.xoetrope.xui.XProjectManager;
import net.xoetrope.xui.data.XBaseModel;
import net.xoetrope.xui.data.XModel;
public class TestXUIDB1 {
	/* The DatabaseTableModel is the best bet for using databases with XModel . It gives enough flexibility while defining connections.
	 * Uses extensively with TestXUIDB,It allows the use of a named connection, All interaction is in the form of familiar XModel interface which 
	 * makes interfacing between the XModel and database very easy both for reading and writing .
	 * 
	 * 
	 * 
	 * */ 
	
	public static void getReportData(String path,XModel dataM,int noOfColumns)
	{
		XModel dtm= new XBaseModel();
	TestXUIDB1.readTree(dtm, "keyvalue", path);
	int count=0;
		for(int i =0; i<dtm.getNumChildren();i+=noOfColumns)
		{
			XBaseModel xm= new XBaseModel();
			xm.setTagName("tr");
			for(int j=0; j<noOfColumns;j++)
			{
				
			xm.setId(""+(i+j));
			XBaseModel desc= new XBaseModel();
			desc.setId("label"+j);
			desc.set(""+dtm.get((i+j)).getId());
			XBaseModel icd= new XBaseModel();
			icd.setId("value"+j);
			System.out.println(dtm.get((i+j)).get());
			icd.set(""+dtm.get((i+j)).get());
			xm.append(desc);
			xm.append(icd);
			count++;
			if(count>=dtm.getNumChildren())
				break;
			}
			
			
			
			dataM.append(xm);
			
		
		}
		
	}
	public static void getDiffDiagnosis(String icdCode,XModel dataM)
	{
		//String sql="SELECT b.Description Description,DiffDiagnosis FROM icd_family a left join icd_diff b ON a.name=b.family WHERE ICD='"+icdCode+"' and b.Description is not null";
		String sql="SELECT  description,diffdiagnosis FROM icd_diff";
		System.out.println(sql);
		try{
		//System.in.read();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		DatabaseTableModel dtm= new DatabaseTableModel();
		dtm.setSqlStatement(sql, "test", false);
		dtm.retrieve();
		for(int i =0; i<dtm.getNumChildren();i++)
		{
			XBaseModel xm= new XBaseModel();
			xm.setTagName("tr");
			xm.setId(""+i);
			XBaseModel desc= new XBaseModel();
			desc.setId("description");
			desc.set(""+dtm.get(i).get("description").toString());
			XBaseModel icd= new XBaseModel();
			icd.setId("diffdiagnosis");
			System.out.println(dtm.get(i).get("diffdiagnosis").toString());
			icd.set(""+dtm.get(i).get("diffdiagnosis").toString());
			
			
			xm.append(desc);
			xm.append(icd);
			dataM.append(xm);
			
		
		}
		
	}
	
	public static void getSearch(String searchKey,XModel dataM)
	{
		String sql="SELECT DISTINCT ICD,DESCRIPTION FROM icd_synonyms a LEFT JOIN icd_family b ON a.family=b.name WHERE synonyms like '"+searchKey+"%'";// OR synonyms LIKE '"+searchKey+" %'";
		DatabaseTableModel dtm= new DatabaseTableModel();
		dtm.setSqlStatement(sql, "test", false);
		dtm.retrieve();
		for(int i =0; i<dtm.getNumChildren();i++)
		{
			XBaseModel xm= new XBaseModel();
			xm.setTagName("tr"); 
			xm.setId(""+i);
			XBaseModel desc= new XBaseModel();
			desc.setId("description");
			desc.set(""+dtm.get(i).get("DESCRIPTION").toString());
			XBaseModel icd= new XBaseModel();
			icd.setId("icd");
			System.out.println(dtm.get(i).get("ICD").toString());
			icd.set(""+dtm.get(i).get("ICD").toString());
			
			
			xm.append(desc);
			xm.append(icd);
			dataM.append(xm);
			
		
		}
		
	}
	public static Vector findPhysicians(String vaId){
		
	String language=	TestXUIDB1.getValue("keyvalue","/va/"+vaId+"/gi/Language");
	System.out.println("language "+language);
	//String sql="SELECT DISTINCT a.physician physician FROM report_language c LEFT JOIN physician_language a ON c.language=a.language LEFT JOIN physician_workload b ON a.physician= b.physician WHERE c.report="+vaId+" AND b.workload < 11";  
	String sql="SELECT DISTINCT a.physician physician from  physician_language a  LEFT JOIN physician_workload b ON a.physician= b.physician WHERE b.workload < 11 ";//and a.language='"+language+"'";
	DatabaseTableModel dtm= new DatabaseTableModel();
	dtm.setSqlStatement(sql, "test", false);
	dtm.retrieve();
		Vector ind=new Vector();
		for(int i =0; i<dtm.getNumChildren();i++)
		{
			String phy=dtm.get(i).get("physician").toString();
			System.out.println(phy);
			ind.add(dtm.get(i).get("physician").toString());
			
		}
		
		
		//count++;
	return ind;
		
		
	}
	
	public static void saveProcess(com.kentropy.process.Process p)
	{
		try{
		String where=" pid ='"+p.pid+"'";
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("process","*",where,"test",false);
	//	dt.setDistinct(true);
		dt.retrieve();
		String s= new String("");
		SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");
		String st="'"+sdf.format(p.startTime)+"'";
		String et=p.endTime==null?null:("'"+sdf.format(p.endTime)+"'");
		System.out.println(dt.getNumChildren());
		
		if(dt.getNumChildren()>0)
		{
			s="update process set status='"+p.status+"',startTime="+st+",endTime="+et+", stateMachine='"+p.states+"' where"+where;
		}
		else
			s="insert into process (pid,status,startTime,endTime,stateMachine) Values('"+p.pid+"','"+p.status+"',"+st+","+st+""+",'"+p.states+"')";
		System.out.println(">>>>"+s);
		PreparedStatement ps=	dt.getTable().getPreparedStatement(s);
		ps.execute();
		//dt.getTable().releasePreparedStatement(ps);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}
	
	
	public static void execute(String table,String where,String sql)  throws Exception
	{
		
		DatabaseTableModel dt= new DatabaseTableModel();
	//	dt.setup
		dt.setupTable(table);//,"*",where,"test",false);
		
		PreparedStatement ps=	dt.getTable().getPreparedStatement(sql);
	/*	for(int i=0;i<sql.size();i++)
		{
		ps.addBatch(sql.get(i).toString());
		ps.execute();
		}*/
		ps.execute();
		ps.close();
	}
	
	public static void saveTransition( String id,String pid,int status)
	{
		try{
		String where=" id ='"+id+"'";
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("transitions","*",where,"test",false);
	//	dt.setDistinct(true);
		dt.retrieve();
		String s= new String("");
		SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");
	
		System.out.println(dt.getNumChildren());
		
		if(dt.getNumChildren()>0)
		{
			s="update transitions set pid='"+pid+"',status="+status+ " where"+where;
		}
		else
			s="insert into transitions (pid,status) Values('"+pid+"','"+status+"')"; //,"+st+","+st+""+",'"+p.states+"')";
		System.out.println(">>>>"+s);
		PreparedStatement ps=	dt.getTable().getPreparedStatement(s);
		ps.execute();
		//dt.getTable().releasePreparedStatement(ps);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}
	public static String[] getNextTransition() throws Exception
	{
		
		String where=" status =0";//+pid+"'";
		DatabaseTableModel dt= new DatabaseTableModel();
		//dt.get(arg0)
		dt.setupTable("transitions","*",where,"test",false);
		dt.retrieve();
		com.kentropy.process.Process p=null;
		SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		System.out.println(" NO of transitions"+dt.getNumChildren());
		if(dt.getNumChildren()>0)
			
		{String [] ret= new String[2];
			ret[0]=dt.get(0).get("id").toString();
			ret[1]=dt.get(0).get("pid").toString();
			return ret;
			
			
			
		}
		return null;
		
	}
	
	public static Process getProcess(String pid) throws Exception
	{
		
		String where=" pid ='"+pid+"'";
		DatabaseTableModel dt= new DatabaseTableModel();
		//dt.get(arg0)
		dt.setupTable("process","*",where,"test",false);
		dt.retrieve();
		com.kentropy.process.Process p=null;
		SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		if(dt.getNumChildren()>0)
			
		{
			p=new Process();
			p.pid=pid;
			p.status=dt.get(0).get("status").toString();
			Object startTime=dt.get(0).get("startTime");
			Object endTime=dt.get(0).get("startTime");
			System.out.println(dt.get(0).get("startTime"));
			System.out.println(dt.get(0).get("endTime"));
			if(startTime!=null)
			p.startTime=sdf.parse(""+startTime);
			if(endTime!=null)
				p.endTime=sdf.parse(""+endTime);
			
			System.out.println(p.status);
			System.out.println(p.startTime);
			p.states=Process.createStateMachine();
			p.states.deserialize((dt.get(0).get("stateMachine")+""));
			System.out.println(p.states.getCurrentState());
			System.out.println(p.states);
			
		}
		return p;
		
	}
public static XModel	getTasks(String surveyType,String team, String taskPath,KenList dataPath)
{
	KenList kl= new KenList("area/house/household/member");
	
	KenList kl1=null;
	if(kl.size()>dataPath.size())
	{
	kl1=kl.subset(0, dataPath.size()-1);
	}
	else
	{
		kl1=kl;
	}
	
	String context=kl1.add1("=").add1(dataPath).toString(" and ");
	String where ="task like '%definition/"+taskPath+"' and assignedto='"+team+"' "+(context.length()>0? "and "+context:"")+" and survey_type='"+surveyType+"' and (duedate is null or duedate >= Now())";
	System.out.println(" Where "+where);
	XModel dataM=new XBaseModel();
	TestXUIDB1.getTaskData(where,dataM );
	return dataM;
}

public static XModel	getTasks1(String surveyType,String team, String taskPath,KenList dataPath)
{
	KenList kl= new KenList("area/house/household/member");
	
	KenList kl1=null;
	if(kl.size()>dataPath.size())
	{
	kl1=kl.subset(0, dataPath.size()-1);
	}
	else
	{
		kl1=kl;
	}
	
	String context=kl1.add1("=").add1(dataPath).toString(" and ","'");
	String defPath="taskdefinitions/"+((taskPath!=null &&! taskPath.equals(""))?""+surveyType+"_taskdefinition/"+taskPath:""+surveyType+"_taskdefinition/%");
		
	String where ="task like '"+defPath+"/%' and task not like '"+defPath+"/%/%' and assignedto='"+team+"' "+(context.length()>0? "and "+context:"")+" and (status !='1' or status is null) ";
	System.out.println(" Where "+where);
	XModel dataM=new XBaseModel();
	TestXUIDB1.getTaskData(where,dataM );
	return dataM;
}
	public static void getTasks(XModel ioM, String team,String participant) throws Exception
	{
 
		String parent="taskdefinitions/healthcheckup_taskdefinition";

			testP(parent,team,ioM);

		
		
	}

	public static void checkDBServer() throws Exception
	{NamedConnectionManager nc=(NamedConnectionManager)NamedConnectionManager.getInstance();
	ConnectionObject co=nc.getConnection("test");
	
		
	}
	public static String getTaskStatusPath(String task, String surveyType, String area, String house, String household, String individual )
	{
		//String currentTask = (String)currentTaskStr.get();		
		java.util.StringTokenizer tkzr = new java.util.StringTokenizer(task, "/");
		int tokenIndex=0;
		String outputPath="";
		String tkn="";
		while(tkzr.hasMoreTokens())
		{
			tkn=tkzr.nextToken();			
			switch(tokenIndex)
			{
			case 0:
				outputPath+="survey";
				break;			
			case 1:
				outputPath+=surveyType+"/tasks";
				break;			
			case 3:
				outputPath+=tkn+"-"+area;
				break;
			case 4:
				outputPath+=tkn+"-"+house;
				break;
			case 5:
				outputPath+=tkn+"-"+household;
				break;
			case 6:
				if(individual==null || individual.equals("")) // for task1(interview), individual exist. For task0, FormA survey, individual may not exist  
					outputPath+=tkn;
				else
					outputPath+=tkn+"-"+individual;					
				break;
			default: // includes '1' for surveytasks
				outputPath+=tkn;		
			}			
			outputPath+="/";
			tokenIndex++;
		}
		outputPath= outputPath.substring(0, outputPath.length()-1);
		System.out.println("Output path for task '="+task+"'="+outputPath);
		return outputPath;
	}
	public static int getTaskChildren(String parentPath ,String team)
	{
		String taskStr=parentPath;//"taskdefinitions/"+getSurveyType()+"_taskdefinition/task0";
		//String context=((!area.equals(""))?"and area="+area :"")+((!house.equals(""))?" and house="+house:"")+ ((!household.equals(""))?" and household="+household:"")+((!individual.equals(""))?" and member="+individual:"");
		System.out.println(taskStr);	
		try
		{
					
			String where="assignedto="+team+" and  survey_type='2'  and task LIKE '"+taskStr+"/%' and  task NOT LIKE '"+taskStr+"/%/%' ";
			System.out.println(where);
			DatabaseTableModel dt= new DatabaseTableModel();
			dt.setupTable("tasks","count(*) count1",where,"test",false);
		//	dt.setDistinct(true);
			dt.retrieve();
			XModel row=dt.get(0);
			return Integer.parseInt(row.get("count1").toString());
			
		}
		catch(Exception e )
		{
			
			e.printStackTrace();
		}
		
		return 0;
	}
	
	public static XLogisticsModel getLogisticsM(String table ,String name,String path)
	{
		//String taskStr=path;//"taskdefinitions/"+getSurveyType()+"_taskdefinition/task0";
		String context="and path='"+path+"'";
	//	String context=((area != null && !area.equals("") &&!area.equals("-1"))?"and area="+area :"")+((house !=null && !house.equals(""))?" and house="+house:"")+ ((household !=null && !household.equals(""))?" and household="+household:"")+((individual !=null && !individual.equals(""))?" and member="+individual:"");
	//	System.out.println(taskStr);	
		try
		{
					
			String where="name='"+name+"' "+context;//and  task NOT LIKE '"+taskStr+"/%/%' "+context;
			System.out.println(where);
			DatabaseTableModel dt= new DatabaseTableModel();
			dt.setupTable(table,"*",where,"test",false);
		//	dt.setDistinct(true);
			dt.retrieve();
		
	//		System.out.println(sql2);				
			 
		//	ResultSet rs1 = stmt2.executeQuery(sql2);
			
			//XDatModel dM =new XDataModel();
			XLogisticsModel dataM=new XLogisticsModel();
			if(dt.getNumChildren()==0)
			{
				dataM.setId(name);
				dataM.set("@path",path);
			/*	dataM.set("@area",area);
				dataM.set("@house",house);
				dataM.set("@household",household);
				dataM.set("@member",individual);*/
				return dataM;
				
				
			}
			
		//	for(int i=0; i<dt.getNumChildren();i++)
			{
				XModel row=dt.get(0);
				
			
				for(int j=0;j<dt.getNumAttributes();j++)
				{
					
					if(dt.getAttribName(j).equals("id"))
					{
						continue;
					}
				dataM.set("@"+dt.getAttribName(j),row.get(j).get());
				}
				System.out.println(" >>> "+dataM.get("@name"));
			
			
			//taskM.setId(taskPath);
			//ioM.get(taskPath)
			//	testP(taskM.get("@task").toString(),team,taskM);
//ioM.append(taskM);
				 
			}
			dataM.setId(name);
			return dataM;
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}
	public static XDataModel getDataM(String table ,String name,String area,String house,String household,String individual)
	{
		//String taskStr=path;//"taskdefinitions/"+getSurveyType()+"_taskdefinition/task0";
		String context=((area != null && !area.equals("") &&!area.equals("-1"))?"and area="+area :"")+((house !=null && !house.equals(""))?" and house="+house:"")+ ((household !=null && !household.equals(""))?" and household="+household:"")+((individual !=null && !individual.equals(""))?" and member="+individual:"");
	//	System.out.println(taskStr);	
		try
		{
					
			String where="name='"+name+"' "+context;//and  task NOT LIKE '"+taskStr+"/%/%' "+context;
			System.out.println(where);
			DatabaseTableModel dt= new DatabaseTableModel();
			dt.setupTable(table,"*",where,"test",false);
		//	dt.setDistinct(true);
			dt.retrieve();
		
	//		System.out.println(sql2);				
			 
		//	ResultSet rs1 = stmt2.executeQuery(sql2);
			
			//XDatModel dM =new XDataModel();
			XDataModel dataM=new XDataModel();
			if(dt.getNumChildren()==0)
			{
				dataM.setId(name);
				dataM.set("@name",name);
				dataM.set("@area",area);
				dataM.set("@house",house);
				dataM.set("@household",household);
				dataM.set("@member",individual);
				return dataM;
				
				
			}
			
		//	for(int i=0; i<dt.getNumChildren();i++)
			{
				XModel row=dt.get(0);
				
			
				for(int j=0;j<dt.getNumAttributes();j++)
				{
					
					if(dt.getAttribName(j).equals("id"))
					{
						continue;
					}
				dataM.set("@"+dt.getAttribName(j),row.get(j).get());
				}
				System.out.println(" >>> "+dataM.get("@name"));
			
			
			//taskM.setId(taskPath);
			//ioM.get(taskPath)
			//	testP(taskM.get("@task").toString(),team,taskM);
//ioM.append(taskM);
				 
			}
			dataM.setId(name);
			return dataM;
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public static void createMessage() throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		
		dt.setupTable("changelogs","value","","test",true);
		dt.retrieve();
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		FileWriter fw = new FileWriter("c:\\message.xml");
		fw.write("<message>\n");
		for(int i=0; i<dt.getNumChildren();i++)
		{
			XModel row=dt.get(i);
			
			String log=(String)row.get(0).get();
			fw.write(log);
			
		
			
		}
		fw.write("</message>\n");
		fw.close();
		

		}
	public static String getLastChangeLog() throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		
		dt.setupTable("changelogs","max(id) bookmark","","test",true);
		dt.retrieve();
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		//FileWriter fw = new FileWriter("c:\\message.xml");
		//fw.write("<message>\n");
		for(int i=0; i<dt.getNumChildren();i++)
		{
			XModel row=dt.get(i);
			
			String time=(String)row.get(0).get();
			return time;
			//fw.write(log);
				
		}
		return null;
		
	}
	public static void sendServerLogs(String participant,String recepients,String frombookmark,String tobookmark) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		System.out.println("bookmark "+frombookmark);
		dt.setupTable("changelogs","value"," status is null and id >'"+frombookmark+"' and id <'"+tobookmark+"'","test",true);
		dt.retrieve();
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		//FileWriter fw = new FileWriter("c:\\message.xml");
		//fw.write("<message>\n");
		Vector logs=new Vector();
		Client cl=new com.kentropy.transfer.Client();
		cl.participant=participant;
		cl.operation=null;
		
		for(int i=0; i<dt.getNumChildren();i++)
		{
			XModel row=dt.get(i);
			
			String log=(String)row.get(0).get();
			logs.add(log);
			//fw.write(log);
				
		}
		cl.run(logs,recepients);
		PreparedStatement ps= dt.getTable().getPreparedStatement("update changelogs set status='1'");
		ps.execute();
		ps.close();
		//fw.write("</message>\n");
		//fw.close();
		

		}	
	
	public static void sendServerLogs2(String participant,String recepients,String frombookmark,String tobookmark) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		System.out.println("bookmark "+frombookmark);
		dt.setupTable("changelogs","value"," status is null and id >'"+frombookmark+"' and id <'"+tobookmark+"'","test",true);
		dt.retrieve();
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		//FileWriter fw = new FileWriter("c:\\message.xml");
		//fw.write("<message>\n");
		//Vector logs=new Vector();
		Client cl=new com.kentropy.transfer.Client();
		cl.participant=participant;
		cl.operation=null;
		SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd-hh-mm-ss-SSS");
		StringBuffer logs=new StringBuffer();
		
		logs.append("<logs>");
		
		for(int i=0; i<dt.getNumChildren();i++)
		{
			XModel row=dt.get(i);
			
			String log=(String)row.get(0).get();
			logs.append(log+"\r\n");
			//fw.write(log);
				
		}
		logs.append("</logs>");
		String fname=	"./"+participant+"-"+sdf.format(new Date())+"-received.xml";
		
	
	
	FileWriter fw= new FileWriter(fname);//"./"+headers1.get("participant")+"-"+sdf.format(new Date())+"-received.xml");
	//System.out.println("Line count "+count);//line+" "+state);
	//fw.write("m>);
fw.write(logs.toString());
	//System.out.println(log.toString());
	fw.close();
		//cl.run(logs,recepients);
	StringTokenizer st= new StringTokenizer(recepients,",");
	//boolean server=false;
	if(st.countTokens()>1)
	{
	while(st.hasMoreTokens())
	{
	com.kentropy.db.TestXUIDB1.deliverMessage(fname,st.nextToken());//headers1.get("participant")+"-"+sdf.format(new Date())+"-received.xml", st.nextToken());
	}
	}
	else
		com.kentropy.db.TestXUIDB1.deliverMessage(fname,recepients);//headers1.get("participant")+"-"+sdf.format(new Date())+"-received.xml", recepients);
	System.out.println("dELIVERED");
		PreparedStatement ps= dt.getTable().getPreparedStatement("update changelogs set status='1'");
		ps.execute();
		ps.close();
		//fw.write("</message>\n");
		//fw.close();
	
		//fw.write("</message>\n");
		//fw.close();
		

		}	
	public static void sendServerLogs1(String participant,String recepients) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		//System.out.println("bookmark "+frombookmark);
		dt.setupTable("changelogs","value"," status is null or status !=1 " ,"test",false);
		dt.retrieve();
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		//FileWriter fw = new FileWriter("c:\\message.xml");
		//fw.write("<message>\n");
		Vector logs=new Vector();
		Client cl=new com.kentropy.transfer.Client();
		cl.participant=participant;
		cl.operation=null;
		
		for(int i=0; i<dt.getNumChildren();i++)
		{
			XModel row=dt.get(i);
			
			String log=(String)row.get(0).get();
			logs.add(log);
			//fw.write(log);
				
		}
		cl.run(logs,recepients);
		PreparedStatement ps= dt.getTable().getPreparedStatement("update changelogs set status='1'");
		ps.execute();
		ps.close();
		//fw.write("</message>\n");
		//fw.close();
		

		}	
	
	public static void sendLogs(String participant,String recepients) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		
		dt.setupTable("changelogs","value"," status is null ","test",true);
		dt.retrieve();
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		//FileWriter fw = new FileWriter("c:\\message.xml");
		//fw.write("<message>\n");
		Vector logs=new Vector();
		Client cl=new com.kentropy.transfer.Client();
		cl.participant=participant;
		
		
		for(int i=0; i<dt.getNumChildren();i++)
		{
			XModel row=dt.get(i);
			
			String log=(String)row.get(0).get();
			logs.add(log);
			//fw.write(log);
				
		}
		cl.run(logs,recepients);
		PreparedStatement ps= dt.getTable().getPreparedStatement("update changelogs set status='1'");
		ps.execute();
		ps.close();
		//fw.write("</message>\n");
		//fw.close();
		

		}
	public static void sendLogsLocal(String path ,String participant,String recepients) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd-hh-mm-ss-SSS");
		dt.setupTable("changelogs","value"," status is null ","test",true);
		dt.retrieve();
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		//FileWriter fw = new FileWriter("c:\\message.xml");
		//fw.write("<message>\n");
		StringBuffer logs=new StringBuffer();
		Client cl=new com.kentropy.transfer.Client();
		cl.participant=participant;
		logs.append("<logs>");
		
		for(int i=0; i<dt.getNumChildren();i++)
		{
			XModel row=dt.get(i);
			
			String log=(String)row.get(0).get();
			logs.append(log+"\r\n");
			//fw.write(log);
				
		}
		logs.append("</logs>");
		String fname=	path+"/"+participant+"-"+sdf.format(new Date())+"-received.xml";
		
	
	
	FileWriter fw= new FileWriter(fname);//"./"+headers1.get("participant")+"-"+sdf.format(new Date())+"-received.xml");
	//System.out.println("Line count "+count);//line+" "+state);
	//fw.write("m>);
fw.write(logs.toString());
	//System.out.println(log.toString());
	fw.close();
		//cl.run(logs,recepients);
		PreparedStatement ps= dt.getTable().getPreparedStatement("update changelogs set status='1'");
		ps.execute();
		ps.close();
		//fw.write("</message>\n");
		//fw.close();
		

		}
	public static void getTask(String path ,String team,XTaskModel ioM,String surveyType,String area,String house,String household,String individual)
	{
		String taskStr=path;//"taskdefinitions/"+getSurveyType()+"_taskdefinition/task0";
		String context=((area != null && !area.equals("") &&!area.equals("-1"))?"and area="+area :"")+((house !=null && !house.equals(""))?" and house="+house:"")+ ((household !=null && !household.equals(""))?" and household="+household:"")+((individual !=null && !individual.equals(""))?" and member="+individual:"");
		System.out.println(taskStr);	
		try
		{
					
			String where="assignedto="+team+" and  survey_type='"+surveyType+"'  and task ='"+taskStr+"/%' ";//and  task NOT LIKE '"+taskStr+"/%/%' "+context;
			System.out.println(where);
			DatabaseTableModel dt= new DatabaseTableModel();
			dt.setupTable("tasks","*",where,"test",false);
		//	dt.setDistinct(true);
			dt.retrieve();
		
	//		System.out.println(sql2);				
			 
		//	ResultSet rs1 = stmt2.executeQuery(sql2);
			
			for(int i=0; i<dt.getNumChildren();i++)
			{
				XModel row=dt.get(i);
				XTaskModel taskM =new XTaskModel();
				ioM.append(taskM);
				taskM.surveyType=surveyType;
				taskM.task=row.get("task").toString();
				taskM.area=row.get("area").toString();
				taskM.house=row.get("house").toString();
				taskM.household=row.get("household").toString();
				taskM.member=row.get("member").toString();
				taskM.assignedTo=row.get("assignedto").toString();
				String status=row.get("status").toString();
				
				String taskPath=getTaskStatusPath(taskM.task,"healthcheckup",taskM.area,taskM.house,taskM.household,taskM.member);
				StringTokenizer st = new StringTokenizer(taskPath,"/");
				String taskId="";
				while(st.hasMoreTokens())
				{
				taskId=st.nextToken();
				}
				//System.out.println(" TAsk Path "+taskPath);
				
				System.out.println(" TAsk Path "+taskPath);
				//XModel taskM= (XModel)ioM.get(taskId);
				taskM.setId(taskId);
				
				taskM.set(status);
				for(int j=0;j<dt.getNumAttributes();j++)
				{
					if(dt.getAttribName(j).equals("task") ||dt.getAttribName(j).equals("survey_type")||dt.getAttribName(j).equals("id"))
					{
						continue;
					}
				taskM.set("@"+dt.getAttribName(j),row.get(j).get());
				}
				System.out.println(" >>> "+taskM.get("@task"));
			
			//taskM.setId(taskPath);
			//ioM.get(taskPath)
			//	testP(taskM.get("@task").toString(),team,taskM);
//ioM.append(taskM);
				 
			}
			
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	
	public static int getTaskChildCount(String parentPath ,String team,XTaskModel ioM,String area,String house,String household,String individual)
	{
		String taskStr=parentPath;//"taskdefinitions/"+getSurveyType()+"_taskdefinition/task0";
		String context=((area != null && !area.equals("") &&!area.equals("-1"))?"and area="+area :"")+((house !=null && !house.equals(""))?" and house="+house:"")+ ((household !=null && !household.equals(""))?" and household="+household:"")+((individual !=null && !individual.equals(""))?" and member="+individual:"");
		System.out.println(taskStr);	
		try
		{
					
			String where="assignedto="+team+" and  survey_type='2'  and task LIKE '"+taskStr+"/%' and  task NOT LIKE '"+taskStr+"/%/%' "+context;
			System.out.println(where);
			DatabaseTableModel dt= new DatabaseTableModel();
			dt.setupTable("tasks","count(*) count1",where,"test",false);
		//	dt.setDistinct(true);
			dt.retrieve();
		
	//		System.out.println(sql2);				
			 
		//	ResultSet rs1 = stmt2.executeQuery(sql2);
			
			return Integer.parseInt(dt.get(0).get("count1").toString());
			
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return 0;
	}
	
	public static void getLogisticsData(String parentPath ,XLogisticsModel ioM)
	{
		String taskStr=parentPath;//"taskdefinitions/"+getSurveyType()+"_taskdefinition/task0";
		String context="path='"+parentPath+"'";//((area != null && !area.equals("") &&!area.equals("-1"))?"and area="+area :"")+((house !=null && !house.equals(""))?" and house="+house:"")+ ((household !=null && !household.equals(""))?" and household="+household:"")+((individual !=null && !individual.equals(""))?" and member="+individual:"");
		System.out.println(taskStr);	
		try
		{
					
			String where=context;//""assignedto="+team+" and  survey_type='"+surveyType+"'  and task LIKE '"+taskStr+"/%' and  task NOT LIKE '"+taskStr+"/%/%' "+context;
			System.out.println(where);
			DatabaseTableModel dt= new DatabaseTableModel();
			dt.setupTable("logistics","*",where,"test",false);
		//	dt.setDistinct(true);
			dt.retrieve();
		
	//		System.out.println(sql2);				
			 
		//	ResultSet rs1 = stmt2.executeQuery(sql2);
			
			for(int i=0; i<dt.getNumChildren();i++)
			{
				XModel row=dt.get(i);
				XLogisticsModel lM =new XLogisticsModel();
				ioM.append(lM);
		//		
			//	String status=row.get("status").toString();
				
				//String taskPath=getTaskStatusPath(taskM.task,"healthcheckup",taskM.area,taskM.house,taskM.household,taskM.member);
			
				//System.out.println(" TAsk Path "+taskPath);
				
				//System.out.println(" TAsk Path "+taskPath);
				//XModel taskM= (XModel)ioM.get(taskId);
				
				//taskM.setAddByDefault(true);
				for(int j=0;j<dt.getNumAttributes();j++)
				{
					System.out.println("Attributes called "+dt.getAttribName(j));
					if(dt.getAttribName(j).equals("name") )
					{
						lM.setId((String)row.get(j).get());
						System.out.println(row.get(j).get());
					}
					else{
						lM.set("@"+dt.getAttribName(j),row.get(j).get());
					}
				
				}
				
				//System.out.println(" >>> "+taskM.get("@task"));
			//	taskM.setAddByDefault(false);
			
			//taskM.setId(taskPath);
			//ioM.get(taskPath)
			//	testP(taskM.get("@task").toString(),team,taskM);
//ioM.append(taskM);
				 
			}
			
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
public static void getTaskData(String where,XModel dataM)
	{
		/* Gets all the tasks which match the where clause. Assumes a parent Model to which all the tasks would be appended*/
		try{

		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("tasks","*",where,"test",false);
		for(int i=0; i<dt.getNumChildren();i++)
		{
			XModel row=dt.get(i);
			XTaskModel taskM =new XTaskModel();
			dataM.append(taskM);
			String status="";
			
			for(int j=0;j<dt.getNumAttributes();j++)
			{
				String attrib=dt.getAttribName(j);
				String attrib1=attrib.toLowerCase();
			
				if(attrib1.equals("survey_type"))
				taskM.surveyType=row.get(attrib).toString();
				if(attrib1.equals("task"))	
			taskM.task=row.get(attrib).toString();
				if(attrib1.equals("area"))
			taskM.area=row.get(attrib).toString();
				if(attrib1.equals("house"))
			taskM.house=row.get(attrib).toString();
				if(attrib1.equals("household"))
			taskM.household=row.get(attrib).toString();
				if(attrib1.equals("member"))
			taskM.member=row.get(attrib).toString();
				if(attrib1.equals("assignedto"))
			taskM.assignedTo=row.get(attrib).toString();
				if(attrib1.equals("survey_type"))
			status=row.get(attrib).toString();
			}
			
			String taskPath=getTaskStatusPath(taskM.task,"healthcheckup",taskM.area,taskM.house,taskM.household,taskM.member);
			dataM.get(taskPath);
			StringTokenizer st = new StringTokenizer(taskPath,"/");
			String taskId="";
			while(st.hasMoreTokens())
			{
			taskId=st.nextToken();
			}
			//System.out.println(" TAsk Path "+taskPath);
			
			System.out.println(" TAsk Path "+taskPath);
			//XModel taskM= (XModel)ioM.get(taskId);
			taskM.setId(taskId);
			
			taskM.set(status);
			//taskM.setAddByDefault(true);
			for(int j=0;j<dt.getNumAttributes();j++)
			{
				String attrib=dt.getAttribName(j);
				String attrib1=attrib.toLowerCase();
				
				/* Paranoid maintenance of state of legacy code which took a round about root of getting the taskpath while reading and also while saving it*/
				if(attrib1.equals("task") ||attrib1.equals("survey_type")||attrib1.equals("id"))
				{
					continue;
				}
			taskM.set("@"+attrib1,row.get(j).get());
			}
			
			System.out.println(" >>> "+taskM.get("@task"));
		
			 
		}
		
		
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
	}
	
	public static void getTasks(String parentPath ,String team,XTaskModel ioM,String surveyType,String area,String house,String household,String individual)
	{init();
		String taskStr=parentPath;//"taskdefinitions/"+getSurveyType()+"_taskdefinition/task0";
		String context=((area != null && !area.equals("") &&!area.equals("-1")&&!area.equals("0"))?"and area='"+area+"'" :"")+((house !=null && !house.equals(""))?" and house='"+house+"'":"'")+ ((household !=null && !household.equals(""))?" and household='"+household+"'":"'")+((individual !=null && !individual.equals(""))?" and member='"+individual+"'":"");
		System.out.println(taskStr);	
		String constraint=(ioM.constraint==null||ioM.constraint.equals(""))?"":(" and "+ioM.constraint);
		try
		{
					
			String where="assignedto='"+team+"' and  survey_type='"+surveyType+"'  and task LIKE '"+taskStr+"/%' and  task NOT LIKE '"+taskStr+"/%/%' "+context+ constraint;
			System.out.println(where);
			DatabaseTableModel dt= new DatabaseTableModel();
			dt.setupTable("tasks","*",where,"test",false);
		//	dt.setDistinct(true);
			dt.retrieve();
		
	//		System.out.println(sql2);				
			 
		//	ResultSet rs1 = stmt2.executeQuery(sql2);
			
			for(int i=0; i<dt.getNumChildren();i++)
			{
				XModel row=dt.get(i);
				XTaskModel taskM =new XTaskModel();
				ioM.append(taskM);
				
				String status="";
				for(int j=0;j<dt.getNumAttributes();j++)
				{
					String attrib=dt.getAttribName(j);
					String attrib1=attrib.toLowerCase();
				
					if(attrib1.equals("survey_type"))
					taskM.surveyType=row.get(attrib).toString();
					if(attrib1.equals("task"))	
				taskM.task=row.get(attrib).toString();
					if(attrib1.equals("area"))
				taskM.area=row.get(attrib).toString();
					if(attrib1.equals("house"))
				taskM.house=row.get(attrib).toString();
					if(attrib1.equals("household"))
				taskM.household=row.get(attrib).toString();
					if(attrib1.equals("member"))
				taskM.member=row.get(attrib).toString();
					if(attrib1.equals("assignedto"))
				taskM.assignedTo=row.get(attrib).toString();
					if(attrib1.equals("survey_type"))
				status=row.get(attrib).toString();
				}
				
				String taskPath=getTaskStatusPath(taskM.task,"healthcheckup",taskM.area,taskM.house,taskM.household,taskM.member);
				StringTokenizer st = new StringTokenizer(taskPath,"/");
				String taskId="";
				while(st.hasMoreTokens())
				{
				taskId=st.nextToken();
				}
				//System.out.println(" TAsk Path "+taskPath);
				
				System.out.println(" TAsk Path "+taskPath);
				//XModel taskM= (XModel)ioM.get(taskId);
				taskM.setId(taskId);
				
				taskM.set(status);
				//taskM.setAddByDefault(true);
				for(int j=0;j<dt.getNumAttributes();j++)
				{
					if(dt.getAttribName(j).equals("task") ||dt.getAttribName(j).equals("survey_type")||dt.getAttribName(j).equals("id"))
					{
						continue;
					}
				taskM.set("@"+dt.getAttribName(j),row.get(j).get());
				}
				
				System.out.println(" >>> "+taskM.get("@task"));
			//	taskM.setAddByDefault(false);
			
			//taskM.setId(taskPath);
			//ioM.get(taskPath)
			//	testP(taskM.get("@task").toString(),team,taskM);
//ioM.append(taskM);
				 
			}
			
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	public static void  testP(String parentPath ,String team,XModel ioM)
	{
		String taskStr=parentPath;//"taskdefinitions/"+getSurveyType()+"_taskdefinition/task0";
		//String context=((!area.equals(""))?"and area="+area :"")+((!house.equals(""))?" and house="+house:"")+ ((!household.equals(""))?" and household="+household:"")+((!individual.equals(""))?" and member="+individual:"");
		System.out.println(taskStr);	
		try
		{
					
			String where="assignedto="+team+" and  survey_type='2'  ";//and task LIKE '"+taskStr+"/%' and  task NOT LIKE '"+taskStr+"/%/%' ";
			DatabaseTableModel dt= new DatabaseTableModel();
			dt.setupTable("tasks","*",where,"test",false);
		//	dt.setDistinct(true);
			dt.retrieve();
		
	//		System.out.println(sql2);				
			 
		//	ResultSet rs1 = stmt2.executeQuery(sql2);
			
			for(int i=0; i<dt.getNumChildren();i++)
			{
				XModel row=dt.get(i);
				
				String task=row.get("task").toString();
				String area=row.get("area").toString();
				String house=row.get("house").toString();
				String household=row.get("household").toString();
				String member=row.get("member").toString();
				String status=row.get("status").toString();
				
				String taskPath=getTaskStatusPath(task,"healthcheckup",area,house,household,member);
				
				XModel taskM= (XModel)ioM.get(taskPath);
				taskM.set(status);
				for(int j=0;j<dt.getNumAttributes();j++)
				{
					if(dt.getAttribName(j).equals("task") ||dt.getAttribName(j).equals("survey_type")||dt.getAttribName(j).equals("id"))
					{
						continue;
					}
				taskM.set("@"+dt.getAttribName(j),row.get(j).get());
				}
				System.out.println(" >>> "+taskM.get("@task"));
			
			//taskM.setId(taskPath);
			//ioM.get(taskPath)
			//	testP(taskM.get("@task").toString(),team,taskM);
//ioM.append(taskM);
				 
			}
			
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	
		
	}
	
	public static String getPath(XModel taskM,XModel rel)
	{
		XModel parent=taskM.getParent();
		String id=taskM.getId();
		while(parent !=null && parent != rel)
		{
			id=parent.getId()+"/"+id;
			parent=parent.getParent();
		}
		return id;
		
			
	}
	public static Vector split(String path,String sep,int index)
	{
		StringTokenizer st = new StringTokenizer(path,"/");
		Vector path1=new Vector();
		while(st.hasMoreTokens())
		{
			String ele=st.nextToken();
			if(ele.indexOf(sep)!=-1)
			{
				StringTokenizer st1= new StringTokenizer(ele,sep);
				int count=0;
				
				for(count=0;count <= index && st1.hasMoreTokens();count++ )
				{
				String tmp= 	st1.nextToken();
					
					if(count==index && tmp != null && !tmp.equals("null") && !tmp.equals(""))
					{
						path1.add(tmp);
						
					}
					//count++;
				}
				
			}
			
		}
		
		return path1;
		
	}
	
	public static void dataPath(String taskPath)
	{
		
	}
	public static DateFormat getMysqlDateFormat()
	{
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return df;
	}
	
	public static int toInt(String obj,int defaultVal)
	{
		try{
		int val=Integer.parseInt(obj);
		return val;
		}
		catch(Exception e)
		{
		
		}
		return defaultVal;
	
	}
	
	public static Date toDatetime(String obj, Date defaultVal)
	{
		try{
			Date val=getDateFormat().parse(obj);
			return val;
			
		}
		catch(Exception e)
		{
			
		}
		return defaultVal;
		
	}
	
	public static String toMySQlDatetime(Date obj,String defaultVal)
	{
		try{
			String val=getMysqlDateFormat().format(obj);
			return val;
			
		}
		catch(Exception e)
		{
			
		}
		return defaultVal;
	}
	
	public static boolean checkIfTaskCanBeSaved(String dataPath, String taskPath)
	{
		return true;
		
	}
	public static int saveTaskToDb(XModel taskM, String parentTaskPath, String parentDataPath)
	{
		// construct task path
		
		String taskId = taskM.getId();
		//System.ou
		int hiphenIndex = taskId.indexOf("-");
		//com.kentropy.logging.WebPortalLogger.info("Inside saveTaskToDb hiphenindex="+hiphenIndex);
		String taskPath="";
		String dataPath="";
		if(hiphenIndex!=-1) // all task path may not have hiphen
		{
			taskPath =parentTaskPath+"/"+taskId.substring(0, hiphenIndex);
			String dataStr = taskId.substring(hiphenIndex+1);
			//com.kentropy.logging.WebPortalLogger.info("DataStr = "+dataStr);
			// temporary fix for task0-null issue
			if(!dataStr.equals("null"))
			{
				dataPath = parentDataPath+"/"+taskId.substring(taskId.indexOf("-")+1);
				//com.kentropy.logging.WebPortalLogger.info("parentDataPath = "+parentDataPath+"  "+taskId.substring(taskId.indexOf("-")+1));
                //t=test+"/"+taskId.substring(taskId.indexOf("-")+1);
            //    com.kentropy.logging.WebPortalLogger.info("Data str is not null");
			}
			else
				{
				//com.kentropy.logging.WebPortalLogger.info("Data str is null");
				return 0;
				}
		}	
		else
		{
			taskPath = parentTaskPath+"/"+taskId;
			//dataPath = parentDataPath;
			
		}
		
		
		System.out.println(dataPath+ " "+taskPath);
		StringTokenizer tknzr = new StringTokenizer(dataPath, "/");
		String area=tknzr.hasMoreElements()?tknzr.nextToken():"";
		String house=tknzr.hasMoreElements()?tknzr.nextToken():"";;
		String household=tknzr.hasMoreElements()?tknzr.nextToken():"";;
		String individual=tknzr.hasMoreElements()?tknzr.nextToken():"";
		System.out.println(" Individual ="+individual);
		
	//	int attrIndex = taskM.getAttribute("assignedto");		
		int assignedTo = toInt((String)taskM.get("@assignedto"),-1);
		int areaId = toInt(area,-1);
		int teamId = assignedTo;//toInt(assignedTo,-1);	
		Date dtAssigned = toDatetime((String)taskM.get("@dateassigned"),null);	
		int status = toInt((String)taskM.get(),-1);
		Date stTime =toDatetime((String)taskM.get("@starttime"), null);
		Date eTime =toDatetime((String)taskM.get("@endtime"), null);		
		System.out.println("stTime="+stTime);
		System.out.println("eTime="+eTime);
		String stTimeStr = toMySQlDatetime(stTime, null);
		String eTimeStr = toMySQlDatetime(eTime, null);;
		String dtAssignedStr = toMySQlDatetime(dtAssigned, null);		
		
		//String sql = "insert into tasks(survey_type, task, status, area, house, household, member, assignedto, dateassigned, starttime, endtime, modifieddate) values('"+ENUMERATION_TYPE+"', '"+taskPath+"', "+status+", "+areaId+", '"+house+"', '"+household+"',  '"+individual+"', "+teamId+", '"+dateAssigned+"', '"+starttime+"', '"+endtime+"', '"+getDateFormat().format(new Date())+"')";
		// Include check for assignedto, so that top level task 'CompleteAreas' gets created for each team
	//	areaId=8;
		int updatedRecords=0;
	
		if(!checkIfTaskCanBeSaved(dataPath,taskPath))
		{
			
		}
		else
		{	

		
		try
		{
			
			String table="tasks";
			
			String where="task='"+taskPath+"' and area="+areaId+" and house='"+house+"' and household='"+household+"' and member='"+individual+"' and survey_type="+2+" and status != 1";
		
			XModel dataM=taskM;
			
			TestXUIDB1.saveData(table, where, dataM);
	
		}
		catch(Exception exc)
		{
			//System.out.println(" >>> "+sql);
			exc.printStackTrace();
			throw new IllegalStateException("SAVE TASKS TO DB "+exc.toString());//getMessage());
		}	
		
	
		}
		// store it top db
			// for each cihldren c;all same function	
		//System.out.println(" >> children"+taskM.getNumChildren());
		/*try{
		System.in.read();
		}
		catch(IOException io1)
		{
			
		}*/
		for(int index=0; index< taskM.getNumChildren(); index++)
		{				
				updatedRecords+=saveTaskToDb(taskM.get(index), taskPath, dataPath);			
		}
		
		return updatedRecords;
	}
	
	public static int saveTaskToSingle(XModel taskM, String parentTaskPath)
	{
		// construct task path
		
		String taskId = taskM.getId();
		//System.ou
		int hiphenIndex = taskId.indexOf("-");
		//com.kentropy.logging.WebPortalLogger.info("Inside saveTaskToDb hiphenindex="+hiphenIndex);
		String taskPath="";
		String dataPath="";
		if(hiphenIndex!=-1) // all task path may not have hiphen
		{
			taskPath =parentTaskPath+"/"+taskId.substring(0, hiphenIndex);
			String dataStr = taskId.substring(hiphenIndex+1);
			//com.kentropy.logging.WebPortalLogger.info("DataStr = "+dataStr);
			// temporary fix for task0-null issue
			
		}	
		else
		{
			taskPath = parentTaskPath+"/"+taskId;
			//dataPath = parentDataPath;
			
		}
		
		
		System.out.println(dataPath+ " "+taskPath);
		StringTokenizer tknzr = new StringTokenizer(dataPath, "/");
		String area=tknzr.hasMoreElements()?tknzr.nextToken():"";
		String house=tknzr.hasMoreElements()?tknzr.nextToken():"";;
		String household=tknzr.hasMoreElements()?tknzr.nextToken():"";;
		String individual=tknzr.hasMoreElements()?tknzr.nextToken():"";
		System.out.println(" Individual ="+individual);
		
	//	int attrIndex = taskM.getAttribute("assignedto");		
		int assignedTo = toInt((String)taskM.get("@assignedto"),-1);
		int areaId = toInt(area,-1);
		int teamId = assignedTo;//toInt(assignedTo,-1);	
		Date dtAssigned = toDatetime((String)taskM.get("@dateassigned"),null);	
		int status = toInt((String)taskM.get(),-1);
		Date stTime =toDatetime((String)taskM.get("@starttime"), null);
		Date eTime =toDatetime((String)taskM.get("@endtime"), null);		
		System.out.println("stTime="+stTime);
		System.out.println("eTime="+eTime);
		String stTimeStr = toMySQlDatetime(stTime, null);
		String eTimeStr = toMySQlDatetime(eTime, null);;
		String dtAssignedStr = toMySQlDatetime(dtAssigned, null);		
		
		//String sql = "insert into tasks(survey_type, task, status, area, house, household, member, assignedto, dateassigned, starttime, endtime, modifieddate) values('"+ENUMERATION_TYPE+"', '"+taskPath+"', "+status+", "+areaId+", '"+house+"', '"+household+"',  '"+individual+"', "+teamId+", '"+dateAssigned+"', '"+starttime+"', '"+endtime+"', '"+getDateFormat().format(new Date())+"')";
		// Include check for assignedto, so that top level task 'CompleteAreas' gets created for each team
	//	areaId=8;
		int updatedRecords=0;
	
		if(!checkIfTaskCanBeSaved(dataPath,taskPath))
		{
			
		}
		else
		{	

		
		try
		{
			
			String table="tasks";
			
			String where="task='"+taskPath+"' and area="+areaId+" and house='"+house+"' and household='"+household+"' and member='"+individual+"' and survey_type="+2+" and status != 1";
		
			XModel dataM=taskM;
			
			TestXUIDB1.saveData(table, where, dataM);
	
		}
		catch(Exception exc)
		{
			//System.out.println(" >>> "+sql);
			exc.printStackTrace();
			throw new IllegalStateException("SAVE TASKS TO DB "+exc.toString());//getMessage());
		}	
		
	
		}
		// store it top db
			// for each cihldren c;all same function	
		//System.out.println(" >> children"+taskM.getNumChildren());
		/*try{
		System.in.read();
		}
		catch(IOException io1)
		{
			
		}*/
		for(int index=0; index< taskM.getNumChildren(); index++)
		{				
				updatedRecords+=saveTaskToDb(taskM.get(index), taskPath, dataPath);			
		}
		
		return updatedRecords;
	}
	
	public static DateFormat getDateFormat()
	{
		SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		return df;
	}
	


	public static XModel getAreas(String assignedTo,XModel dataM,String surveyType) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("tasks","area","assignedto='"+assignedTo+"' and area != -1 and survey_type='"+surveyType+"'","test",false);
//		dt.set
		dt.setDistinct(true);
		dt.retrieve();
	//	CachedDatabaseTable dt1=dt.getTable();
		System.out.println(" debug getareas "+dt.getNumChildren());
		for(int i=0;i<dt.getNumChildren();i++)
		{
			//areaM.append(dt.getValue(i));
		String id=dt.get(i).get("area").toString();
		XModel tt=(XModel)dataM.get(id);
		//	dt.get(i).setId(dt.get(i).get("houseno").toString());
		//tt.setId(dt.get(i).get("houseno").toString());
			XModel xm=getAreadetails(id);
			//dt.get(i).append(xm);
		//	tt=getH(area,house,tt.getId(),tt);
			tt.append(xm);
		//	areaM.append(dt.get(i));
		}
		
		//dt1.dump(new FileWriter("c:\\testfetch1.xml"));
		return dataM;
		
	}
	public static XModel getAreadetails(String area)
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		//dt.setupTable("hc_area","*","id="+area,"test",true);
		String sql="select ea.id areacode,ea.landmark landmark,ea.pincode pin, ea.name areaname, ea.description, ea.healthcheckup hcid, ea.target target, su.code sampleunitcode, su.name sampleunitname, si.name state, di.name district, su.vort vort from hc_area ea left join healthcheckup s on ea.healthcheckup=s.id left join sampleunit su on s.sunit=su.code left join states_india si on su. state=si.id  left join districts_india di on su.district=di.id ";
		String where="ea.id="+area;
		dt.setSqlStatement(sql + "where "+where,"test",false);
		dt.setName("updatestatus");
		dt.setId("updatestatus");
		dt.setTagName("data");
		dt.retrieve();
		XBaseModel xm= new XBaseModel();
		xm.setId("taskinfo");
	//	x
		for(int i=0;i<dt.getNumChildren();i++)
		{
		//	dt.get(i).setTagName("data");
			for(int j=0;j<dt.getNumAttributes();j++)
			{
				
				XModel tt=(XModel)xm.get(dt.getAttribName(j));
				tt.set(dt.get(i).get(j).get());
				
			}
			
		}
		
		
		
		return xm;
		
	}
 public static void getUsersForTeam(String team,KenList list)
 {
	 DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("team_user","user","team='"+team+"'","test",false);
		dt.retrieve();
		for(int i=0;i<dt.getNumChildren();i++)
		{
			//areaM.append(dt.getValue(i));
		String id=dt.get(i).get("user").toString();
	//	XModel tt=(XModel)dataM.get(id);
		list.add(id);
		}
		
 }
	
	public static XModel getHouses(String area,XModel areaM) throws Exception
	{
		System.out.println(" Debug area is "+area);
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("houses","houseno","enum_area="+area,"test",false);
		dt.retrieve();
	//	CachedDatabaseTable dt1=dt.getTable();
		System.out.println(dt.getNumChildren());
		for(int i=0;i<dt.getNumChildren();i++)
		{
			//areaM.append(dt.getValue(i));
		String id=dt.get(i).get("houseno").toString();
		XModel tt=(XModel)areaM.get(id);
		//	dt.get(i).setId(dt.get(i).get("houseno").toString());
		//tt.setId(dt.get(i).get("houseno").toString());
			XModel xm=getHousedetails(id,area);
			//dt.get(i).append(xm);
			tt.append(xm);
		
			xm.append(TestXUIDB1.getDataM("data", "gpscheck", area, id, null, null));
			//xm.setId("gpscheck");
		//	areaM.append(dt.get(i));
		}
		
		//dt1.dump(new FileWriter("c:\\testfetch1.xml"));
		return areaM;
		
	}
	public static XModel getHousedetails(String house,String area)
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("houses","*","enum_area="+area+" and houseno="+house,"test",true);
		dt.setName("updatestatus");
		dt.setId("updatestatus");
		dt.setTagName("data");
		dt.retrieve();
		XBaseModel xm= new XBaseModel();
		xm.setId("updatestatus");
	//	x
		for(int i=0;i<dt.getNumChildren();i++)
		{
		//	dt.get(i).setTagName("data");
			for(int j=0;j<dt.getNumAttributes();j++)
			{
				
				XModel tt=(XModel)xm.get(dt.getAttribName(j));
				tt.set(dt.get(i).get(j).get());
				
			}
			
		}
		
		
		
		return xm;
		
	}
	public static String getCurrentUser()
	{
		XModel rootModel=	XProjectManager.getCurrentProject().getModel();
		String currentUser= (String)((XModel)rootModel.get("temp/currentuser")).get();
		return currentUser;
	}
	public static void  createChangeLog(String table,String where,Vector keyFields) throws Exception
	{
		
		DatabaseTableModel dt= new DatabaseTableModel();
	
	
	
		
		
		dt.setupTable(table,"*",where,"test",true);
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		dt.retrieve();
		for (int i=0; i<dt.getNumChildren();i++)
		{
			//System.out.println(" total "+dt.getNumChildren());
			//dt.first();
			String where1="";
			KenList kl= new KenList();
			for(int k=0; k < keyFields.size();k++)
			{
				String value=dt.get(i).get(keyFields.get(k).toString()).toString();
				kl.add(keyFields.get(k).toString()+"='"+value+"'");
			}
			where1=kl.toString(" and ");
			ChangeLog.startLog(table,where1,getCurrentUser());
			String qry ="update "+table+" set ";
			int count=0;
			for(int j=0;j< dt.getNumAttributes();j++)
			{
				String fld=dt.getAttribName(j);
				
			
			//	XModel valM=(XModel)dataM.get("@"+fld);
				int colType=dt.getMetaData().getColumnType(j+1);
			/*	String def=(colType==4)?"0":null;
				Object value=dataM.get("@"+fld);
				value=value==null|| value.equals("")?def:("'"+value+"'");
				qry+=(count==0?"":",")+fld+"="+value;*/
				String value=dt.get(i).get(fld).toString();
				ChangeLog.logField(fld, (String)value);
				count++;
			}
			ChangeLog.endLog();
		}
		
	}
	
	public static void  saveDataM(String table,String where,XModel dataM) throws Exception
	{
		
		DatabaseTableModel dt= new DatabaseTableModel();
	
	ChangeLog.startLog(table,where,getCurrentUser());
	
		
		
		dt.setupTable(table,"*",where,"test",true);
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		dt.retrieve();
		if(dt.getNumChildren()>0)
		{
			System.out.println(" total "+dt.getNumChildren());
			//dt.first();
			String qry ="update "+table+" set ";
			int count=0;
			for(int j=0;j< dt.getNumAttributes();j++)
			{
				String fld=dt.getAttribName(j);
				if(fld.equals("id"))
					continue;
			
			//	XModel valM=(XModel)dataM.get("@"+fld);
				int colType=dt.getMetaData().getColumnType(j+1);
				String def=(colType==4)?"0":null;
				Object value=dataM.get("@"+fld);
				value=value==null|| value.equals("")?def:("'"+value+"'");
				qry+=(count==0?"":",")+fld+"="+value;
				ChangeLog.logField(fld, (String)value);
				count++;
			}
			
			int updates=dt.executeUpdate(qry+ " where "+where );
			System.out.println("updates "+updates);
		//	dt.sync();
			
		}
		else{
			String s="insert into "+table;
			String flds="";
			String values="";
			int count=0;
			for(int j=0;j< dt.getNumAttributes();j++)
			{
				String fld=dt.getAttribName(j);
				if(fld.equals("id"))
					continue;
				
				//XModel valM=(XModel)dataM.get(fld);
				int colType=dt.getMetaData().getColumnType(j+1);
				String def=(colType==4)?"0":null;
				
				//Object value=valM==null?null:valM.get();
				Object value=dataM.get("@"+fld);
				value=value==null|| value.equals("")?def:("'"+value+"'");
				flds+=(count!=0?",":"")+fld;
				values+=(count!=0?",":"")+(value);
				ChangeLog.logField(fld, (String)value);
				count++;
			}
			s+="("+flds+") VALUES("+values+")";
			
			System.out.println(" Debug sql "+s);
			
			
		PreparedStatement ps=	dt.getTable().getPreparedStatement(s);
		ps.execute();
		dt.getTable().releasePreparedStatement(ps);
		ChangeLog.endLog();
		}
	}
	
	
	public static void  importChangeLog(String log) throws Exception
	{
		
		//XBaseModel xm= new XBaseModel();
		StringReader sr= new StringReader(log);
		XmlElement xe=XmlSource.read(sr);
		String logId=xe.getAttribute("id");
		XmlElement dt1=xe.elementAt(0);
		String table=dt1.getAttribute("table");
		String where=dt1.getAttribute("key");
		String user1=dt1.getAttribute("user");
		XmlElement data=	dt1.elementAt(0);
		Enumeration e=data.enumerateAttributeNames();
		TestXUIDB1.saveData1(table, where, data,user1);

		}
	public static void  importChangeLogs(String logs) throws Exception
	{
		
		//XBaseModel xm= new XBaseModel();
		//XDataSource ds= new XData
		StringReader sr= new StringReader(logs);
		XmlElement xe0=XmlSource.read(sr);
		Vector children=xe0.getChildren();
		for(int i=0 ;i<children.size();i++)
		{
			XmlElement xe=(XmlElement)children.get(i);
		String logId=xe.getAttribute("id");
		XmlElement dt1=xe.elementAt(0);
		String table=dt1.getAttribute("table");
		String where=dt1.getAttribute("key");
		String user=dt1.getAttribute("user");
		XmlElement data=	dt1.elementAt(0);
		Enumeration e=data.enumerateAttributeNames();
		try{
		TestXUIDB1.saveData1(table, where, data,user);
		}
		catch(Exception e1)
		{
			e1.printStackTrace();
		}
		}

		}
	
	public static void deliverMessage(String msg, String recepient) throws Exception
	{
DatabaseTableModel dt= new DatabaseTableModel();
		
		dt.setupTable("mqueue","*","","test",true);
		String sql="insert into mqueue (message,recepient) VALUES('"+msg+"','"+recepient+"')";
		System.out.println(sql);
		
			PreparedStatement ps=	dt.getTable().getPreparedStatement(sql);
		ps.execute();
		//dt.getTable().releasePreparedStatement(ps);
		ps.close();		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		//dt.retrieve();
	}
	
	
	public static void  updateMessageStatus(String message,String recepient) throws Exception
	{
DatabaseTableModel dt= new DatabaseTableModel();
dt.setupTable("mqueue","*","","test",true);

		PreparedStatement ps= dt.getTable().getPreparedStatement("update mqueue set status='1' where message='"+message+"' and recepient='"+recepient+"'");
		ps.execute();
		ps.close();
	}
		public static Vector  getMessages(String recepient) throws Exception
	{
DatabaseTableModel dt= new DatabaseTableModel();
		Vector v= new Vector();
String where=" recepient='"+recepient+"' and status is null";
		dt.setupTable("mqueue","message",where,"test",true);
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		dt.retrieve();
		if(dt.getNumChildren()>0)
		{
			for(int i=0;i<dt.getNumChildren();i++)
			{
			XModel row=dt.get(i);
		
			System.out.println(" total "+dt.getNumChildren());
			String message=(String)row.get(0).get();
			v.add(message);
			}
		}
		return v;
			
			//dt.first();
		
			/*for(int j=0;j< dt.getNumAttributes();j++)
			{
				String fld=dt.getAttribName(j);
				XModel valM=(XModel)dataM.get(fld);
				int colType=dt.getMetaData().getColumnType(j+1);
				String def=(colType==4)?"0":null;
				
				Object value=valM==null?null:valM.get();
				value=value==null|| value.equals("")?def:("'"+value+"'");
				 qry+=(j==0?"":",")+fld+"="+value;
			}*/
	}
	
	public static void  saveChangeLog(String log) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		
		dt.setupTable("changelogs","*","","test",true);
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		
			String s="insert into "+"changelogs";
			String flds="";
			String values="";
			s+=" (value) VALUES("+log+")";
			
			System.out.println(" Debug sql "+s);
			
			
		PreparedStatement ps=	dt.getTable().getPreparedStatement(s);
		ps.execute();
		dt.getTable().releasePreparedStatement(ps);
		}
	
	
	public static void  saveData(String table,String where,XModel dataM) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		
		dt.setupTable(table,"*",where,"test",true);
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		dt.retrieve();
		if(dt.getNumChildren()>0)
		{
			System.out.println(" total "+dt.getNumChildren());
			//dt.first();
			String qry ="update "+table+" set ";
			for(int j=0;j< dt.getNumAttributes();j++)
			{
				String fld=dt.getAttribName(j);
				XModel valM=(XModel)dataM.get(fld);
				int colType=dt.getMetaData().getColumnType(j+1);
				String def=(colType==4)?"0":null;
				
				Object value=valM==null?null:valM.get();
				value=value==null|| value.equals("")?def:("'"+value+"'");
				 qry+=(j==0?"":",")+fld+"="+value;
			}
			
			int updates=dt.executeUpdate(qry+ " where "+where );
			System.out.println("updates "+updates);
		//	dt.sync();
			
		}
		else{
			String s="insert into "+table;
			String flds="";
			String values="";
			for(int j=0;j< dt.getNumAttributes();j++)
			{
				String fld=dt.getAttribName(j);
				XModel valM=(XModel)dataM.get(fld);
				int colType=dt.getMetaData().getColumnType(j+1);
				String def=(colType==4)?"0":null;
				
				Object value=valM==null?null:valM.get();
				value=value==null|| value.equals("")?def:("'"+value+"'");
				flds+=(j!=0?",":"")+fld;
				values+=(j!=0?",":"")+(value);
			}
			s+="("+flds+") VALUES("+values+")";
			
			System.out.println(" Debug sql "+s);
			
			
		PreparedStatement ps=	dt.getTable().getPreparedStatement(s);
		ps.execute();
		dt.getTable().releasePreparedStatement(ps);
		}
	
	//	x
		/*for(int i=0;i<dt.getNumChildren();i++)
		{
		
			for(int j=0;j<dt.getNumAttributes();j++)
			{
				
				XModel tt=(XModel)xm.get(dt.getAttribName(j));
				tt.set(dt.get(i).get(j).get());
				
			}
			
		}*/
		
		
		
		
		
	}
	
	public static void  saveConflictData(String table,String where,XModel dataM) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		
		dt.setupTable(table,"*",where,"test",true);
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		dt.retrieve();
		
			String s="insert into "+table;
			String flds="";
			String values="";
			for(int j=0;j< dt.getNumAttributes();j++)
			{
				String fld=dt.getAttribName(j);
				XModel valM=(XModel)dataM.get(fld);
				int colType=dt.getMetaData().getColumnType(j+1);
				String def=(colType==4)?"0":null;
				
				Object value=valM==null?null:valM.get();
				//value=value==null|| value.equals("")?def:("'"+value+"'");
				flds+=(j!=0?",":"")+fld;
				values+=(j!=0?",":"")+(value);
			}
			s+="("+flds+") VALUES("+values+")";
			
			System.out.println(" Debug sql "+s);
			
			
		PreparedStatement ps=	dt.getTable().getPreparedStatement(s);
		ps.execute();
		dt.getTable().releasePreparedStatement(ps);
		
	
		
		
		
	}
	
	public static void  saveData1(String table,String where,XmlElement dataM,String user1) throws Exception
	{
		XModel conflictData=new XBaseModel();
		SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");
		conflictData.set("date","'"+sdf.format(new Date())+"'");
		conflictData.set("surveyor","'"+user1+"'");
		DatabaseTableModel dt= new DatabaseTableModel();
		
		dt.setupTable(table,"*",where,"test",true);
		
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		dt.retrieve();
		if(table.equals("data"))
		{
		
		String value1=dataM.getAttribute("value");
		if(value1==null || value1.equals(" Choose Any One"))
			return;
		}
		System.out.println(" Debug children "+dt.getNumChildren());
		if(dt.getNumChildren()>0)
		{
		//	To be tested
		/*	if(table.equals("task"))
			{
				String status=(String)dt.get(0).get("status");
				if(status !=null && status.equals("2"))
					return;
			}
			else
				if(table.equals("data"))
				{
					
					String status=(String)dt.get(0).get("value");
					if(status !=null && !status.equals("") )
						return;
				}*/
			System.out.println(" total "+dt.getNumChildren());
			//dt.first();
			String qry ="update "+table+" set ";
			int count=0;
			for(int j=0;j< dt.getNumAttributes();j++)
			{
				String fld=dt.getAttribName(j).toLowerCase();
				String value=dataM.getAttribute(fld);
				int colType=dt.getMetaData().getColumnType(j+1);
				String def=(colType==4)?"0":null;
				
				// value=value==null?null:value;
				value=value==null|| value.equals("")?def:("'"+value+"'");
				conflictData.set(fld,value);
				if(!fld.equals("id"))
				{
				 qry+=(count==0?"":",")+fld+"="+value;
				 count++;
				}
			}
			
			if(table.equals("data"))
			{
				
			saveConflictData("data_conflicts","",conflictData);
			}
			if(table.equals("tasks"))
			{
				
		
			String status=dataM.getAttribute("status");
			String endtime=dataM.getAttribute("endtime");
			if((status!=null && status.equals("2"))|| (endtime!=null && endtime.length()>0))
			{
				System.out.println(qry+ " where "+where );
			try{	
			int updates=dt.executeUpdate(qry+ " where "+where );
			System.out.println("updates "+updates);
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			
			}
			else
			{
				saveConflictData("task_conflicts","",conflictData);
				
			}
			}
			if(table.equals("keyvalue"))
			{
				System.out.println(" query "+qry);
				int updates=dt.executeUpdate(qry+ " where "+where );
				System.out.println("updates "+updates);
			}
		
		//	dt.sync();
			
		}
		else{
			String s="insert into "+table;
			String flds="";
			String values="";
			int count=0;
			for(int j=0;j< dt.getNumAttributes();j++)
			{
				String fld=dt.getAttribName(j);
				String value=dataM.getAttribute(fld.toLowerCase());//check this
				int colType=dt.getMetaData().getColumnType(j+1);
				String def=(colType==4)?"0":null;
				if(fld.toLowerCase().equals("id"))
					continue;
				
				System.out.println("Value is "+value);
				// value=valM==null?null:value;
				value=value==null|| value.equals("")?def:("'"+value+"'");
				flds+=(count!=0?",":"")+fld;
				values+=(count!=0?",":"")+(value);
				count++;
			}
			s+="("+flds+") VALUES("+values+")";
			
			System.out.println(" Debug sql "+s);
			
			
		PreparedStatement ps=	dt.getTable().getPreparedStatement(s);
		ps.execute();
		dt.getTable().releasePreparedStatement(ps);
		}
		
		if(table.equals("tasks"))
		{
			
	
		String status=dataM.getAttribute("status");
		String task=dataM.getAttribute("task");
		String pid=dataM.getAttribute("member");
		String type=dataM.getAttribute("survey_type");
		String endtime=dataM.getAttribute("endtime");
		if((status!=null && status.equals("2"))|| (endtime!=null && endtime.length()>0))
		{
			if(type!=null && type.equals("6"))
			{
				Process.taskStatusUpdate(pid, task, status);
			
		}
		}
		}
	//	x
		/*for(int i=0;i<dt.getNumChildren();i++)
		{
		
			for(int j=0;j<dt.getNumAttributes();j++)
			{
				
				
				XModel tt=(XModel)xm.get(dt.getAttribName(j));
				tt.set(dt.get(i).get(j).get());
				
			}
			
		}*/
		
		
		
		
		
	}
	public static String getTaskContext(String task,String area,String house,String hh,String idc)
	{
		String context="";
		if(task !=null)
		{
			context +=" task = '"+task+"'";
			if(area !=null)
			{
				context +="and area = '"+area+"'";
			
			if(house !=null)
			{
				context +="and house = '"+house+"'";
				{
			if(hh !=null)
			{
				context +="and household = '"+hh+"'";
				
			if(idc !=null)
			{
				context +="and member = '"+idc+"'";
				}
				}
			}
			}
			
				
		}
	}
		return context;
	}
	public static String getTaskContext(String task,String area,String house,String hh,String idc,String assignedTo)
	{
		String context="";
		
		if(task !=null)
		{
			context +=" task = '"+task+"' ";
			if(area !=null)
			{
				context +="and area = '"+area+"'";
			
			if(house !=null)
			{
				context +="and house = '"+house+"'";
				
			if(hh !=null)
			{
				context +="and household = '"+hh+"'";
				
			if(idc !=null)
			{
				context +="and member = '"+idc+"'";
				}
				}
			
		
			}
			
			
			}
			if(assignedTo !=null)
			{
				context +="and assignedTo = '"+assignedTo+"'";
			}
				
			}
			
				
		
	
		return context;
	}
	
	public static void saveTask(XTaskModel taskM) throws Exception
	{
		saveTask(taskM.task,taskM.surveyType, taskM.area, taskM.house, taskM.household, taskM.member, taskM);
	}
	public static void  saveTask(String task,String surveyType,String area,String house,String hh,String idc,XModel dataM) throws Exception
	{
		
		DatabaseTableModel dt= new DatabaseTableModel();
		String table="tasks";
		String assignedTo=(String)dataM.get("@assignedto");
		
		if(task.equals("taskdefinitions/healthcheckup_taskdefinition/task0"))
		return;
		String where=getTaskContext(task,area,house,hh,idc,assignedTo);
		ChangeLog.startLog(table, where,getCurrentUser());
		dt.setupTable(table,"*",where,"test",true);
		dt.retrieve();
		dataM.set("@task", task);
		dataM.set("@area", area);
		dataM.set("@house", house);
		dataM.set("@household", hh);
		dataM.set("@member", idc);
		dataM.set("@survey_type", surveyType);
		dataM.set("@status",dataM.get());
		//dataM.set("@status",)
		System.out.println(" TASK "+dataM.get("@task"));

		if(dt.getNumChildren()>0)
		{
			System.out.println(" total "+dt.getNumChildren());
			//dt.first();
			String qry ="update "+table+" set ";
			int count=0;
						for(int j=0;j< dt.getNumAttributes();j++)
			{
			
				String fld=dt.getAttribName(j);
				System.out.println(" DEBUG column "+dt.getMetaData().getColumnType(j+1)+" "+fld);
				if(fld.equals("id"))
					continue;
				
				int colType=dt.getMetaData().getColumnType(j+1);
				String def=(colType==4)?"0":null;
				String value=(String)dataM.get("@"+fld);
				//Object value=valM==null?null:valM.get();
				value=value==null?def:("'"+value+"'");
				 qry+=(count==0?"":",")+fld+"="+value;
				 ChangeLog.logField(fld, value);
				 count++;
			}
			
			int updates=dt.executeUpdate(qry+ " where "+where );
			System.out.println("updates "+updates);
		//	dt.sync();
			System.out.println(" Debug update sql "+qry);
			
		}
		else{
			String s="insert into "+table;
			String flds="";
			String values="";
			int count=0;
			for(int j=0;j< dt.getNumAttributes();j++)
			{
				String fld=dt.getAttribName(j);
				if(fld.equals("id"))
					continue;
				System.out.println(" DEBUG column "+dt.getMetaData().getColumnType(j+1)+" "+fld);
				int colType=dt.getMetaData().getColumnType(j+1);
				String def=(colType==4)?"0":null;
				String value=(String)dataM.get("@"+fld);
				flds+=(count!=0?",":"")+fld;
				value=value==null?def:("'"+value+"'");
				values+=(count!=0?",":"")+(value);
				ChangeLog.logField(fld, value);
				count++;
			}
			s+="("+flds+") VALUES("+values+")";
			
			System.out.println(" Debug sql "+s);
			
			
		PreparedStatement ps=	dt.getTable().getPreparedStatement(s);
		ps.execute();
		ps.close();
		dt.getTable().releasePreparedStatement(ps);
	
		}	
		
		ChangeLog.endLog();
		
	}
	
	public static XModel getHouseholds(String area,String house, XModel houseM) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("households","household","enum_area="+area+ " and house="+house,"test",false);
		dt.retrieve();
	//	CachedDatabaseTable dt1=dt.getTable();
		System.out.println(dt.getNumChildren());
		for(int i=0;i<dt.getNumChildren();i++)
		{
			//areaM.append(dt.getValue(i));
		String id=dt.get(i).get("household").toString();
		XModel tt=(XModel)houseM.get(id);
		//	dt.get(i).setId(dt.get(i).get("houseno").toString());
		tt.setId(dt.get(i).get("household").toString());
			XModel xm=getHouseholddetails(id,house,area);
			xm.append(TestXUIDB1.getDataM("data", "visitHistory", area, house, id, null));
			//dt.get(i).append(xm);
			tt=getIndividuals(area,house,tt.getId(),tt);
			tt.append(xm);
			
			tt.append(TestXUIDB1.getDataM("data", "characteristics", area, house, id, null));
		//	areaM.append(dt.get(i));
		}
		
		//dt1.dump(new FileWriter("c:\\testfetch1.xml"));
		return houseM;
		
	}
	public static XModel getHouseholddetails(String household,String house,String area)
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		String sql="select a.*,a.head headcode,b.name  headname from households a left join members b on a.enum_area=b.enum_area and a.house=b.house and a.household=b.household and a.head=b.idc";
		//dt.setupTable("households","*","enum_area="+area+" and house="+house+" and household="+household,"test",true);
		dt.setSqlStatement(sql+" where a.enum_area='"+area+"' and a.house='"+house+"' and a.household='"+household+"'","test",true);
		dt.setName("updatestatus");
		dt.setId("updatestatus");
		dt.setTagName("data");
		dt.retrieve();
		XBaseModel xm= new XBaseModel();
		xm.setId("updatestatus");
	//	x
		for(int i=0;i<dt.getNumChildren();i++)
		{
		//	dt.get(i).setTagName("data");
			for(int j=0;j<dt.getNumAttributes();j++)
			{
				
				XModel tt=(XModel)xm.get(dt.getAttribName(j));
				tt.set(dt.get(i).get(j).get());
				
			}
			
		}
		
		
		
		return xm;
		
	}
	public static String getMaxIndivId(String area,String house,String household) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("members","max(idc) idc","enum_area="+area+ " and house="+house+" and household="+household,"test",false);
		dt.retrieve();
	//	CachedDatabaseTable dt1=dt.getTable();
		System.out.println(" Individuals "+dt.getNumChildren()+" "+household);
		
		for(int i=0;i<dt.getNumChildren();i++)
		{
			//areaM.append(dt.getValue(i));
			System.out.println(dt.get(i).get(0));
		String id=dt.get(i).get("idc").toString();
		return id;
		}
		
		//dt1.dump(new FileWriter("c:\\testfetch1.xml"));
		return "0";
		
	}
	
	public static XModel getIndividuals(String area,String house,String household, XModel hhM) throws Exception
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("members","idc","enum_area="+area+ " and house="+house+" and household="+household,"test",false);
		dt.retrieve();
	//	CachedDatabaseTable dt1=dt.getTable();
		System.out.println(" Individuals "+dt.getNumChildren()+" "+household);
		for(int i=0;i<dt.getNumChildren();i++)
		{
			//areaM.append(dt.getValue(i));
		String id=dt.get(i).get("idc").toString();
		XModel tt=(XModel)hhM.get(id);
		//	dt.get(i).setId(dt.get(i).get("houseno").toString());
		tt.setId(dt.get(i).get("idc").toString());
			XModel xm=getIndividualdetails(id,household,house,area);
			//dt.get(i).append(xm);
			tt.append(xm);
			tt.append(TestXUIDB1.getDataM("data", "interview", area, house, household, id));
		//	areaM.append(dt.get(i));
		}
		
		//dt1.dump(new FileWriter("c:\\testfetch1.xml"));
		return hhM;
		
	}
	public static XModel getIndividualdetails(String individual,String household,String house,String area)
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("members","*","enum_area="+area+" and house="+house+" and household="+household+" and idc="+individual,"test",true);
		dt.setName("updatestatus");
		dt.setId("updatestatus");
		dt.setTagName("data");
		dt.retrieve();
		XBaseModel xm= new XBaseModel();
		xm.setId("updatestatus");
	//	x
		for(int i=0;i<dt.getNumChildren();i++)
		{
		//	dt.get(i).setTagName("data");
			for(int j=0;j<dt.getNumAttributes();j++)
			{
				
				XModel tt=(XModel)xm.get(dt.getAttribName(j));
				tt.set(dt.get(i).get(j).get());
				
			}
			
		}
		
		
		
		return xm;
		
	}
	public static XModel getInterview(String individual,String household,String house,String area,XModel xm)
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("barshi_interview","*","enum_area="+area+" and house="+house+" and household="+household+" and idc="+individual,"test",true);
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		dt.retrieve();	
		
		//XBaseModel xm= new XBaseModel();
		xm.setId("interview");
		if(dt.getNumChildren()==0)
		{
			getProto("barshi_interview",xm);
			xm.set("enum_area",area);
			xm.set("house",house);
			xm.set("household",household);
			xm.set("idc",individual);
			return xm;
		}
		getDetails(dt,xm);
		
		return xm;
		
	}
	
	
	public static XModel getCC(String household,String house,String area,XModel xm)
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable("barshi_cc","*","enum_area="+area+" and house="+house+" and household="+household+"","test",true);
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		dt.retrieve();	
		
		//XBaseModel xm= new XBaseModel();
		xm.setId("characterstics");
		if(dt.getNumChildren()==0)
		{
			getProto("barshi_cc",xm);
			xm.set("enum_area",area);
			xm.set("house",house);
			xm.set("household",household);
		//	xm.set("idc",individual);
			return xm;
		}
		getDetails(dt,xm);
		
		return xm;
		
	}
	
	
	
	
	public static void getDetails(DatabaseTableModel dt,XModel xm)
	{
		for(int i=0;i<dt.getNumChildren();i++)
		{
			for(int j=0;j<dt.getNumAttributes();j++)
			{
				
				XModel tt=(XModel)xm.get(dt.getAttribName(j));
				tt.set(dt.get(i).get(j).get());
				
			}
			
		}
		
		
	}
	
	public static void  getProto(String table,XModel dataM) 
	{
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable(table,"*","test" ,true);
		for(int i=0;i<dt.getNumAttributes();i++)
		{
		dataM.get(dt.getAttribName(i));
		}

		
	}
	public static String driver="com.mysql.jdbc.Driver";
	
	public static String user="root";
	public static String  passwd="";
	public static String confStatus="error";
	static{
		try{
			String url="jdbc:mysql://localhost:3306/vatest";
			
			try{
			Properties p=new Properties();
			p.load(TestXUIDB1.class.getResourceAsStream("db.properties"));
			driver=p.getProperty("driver",driver);
			url=p.getProperty("dburl");
			user=p.getProperty("user");
			passwd=p.getProperty("passwd");
			confStatus="ok";
			}
			catch(Exception e)
			{
				
				e.printStackTrace();
			}
NamedConnectionManager nc=(NamedConnectionManager)NamedConnectionManager.getInstance();
		
		//nc.addConnection("test", "com.mysql.jdbc.Driver", url, user, passwd);
System.out.println(" >> Driver" +driver);
Class.forName(driver);
		nc.addConnection("test", driver, url, user, passwd);
		//nc.addConnection("test", "org.sqlite.JDBC", url, user, "");
		//Class.forName("org.sqlite.JDBC");
	   // Connection conn =
	     // DriverManager.getConnection("jdbc:sqlite:test.db");

		ConnectionObject co=nc.getConnection("test");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	public static void init()
	{
		/*System.out.println(" Data base init called");
		
		
		
		
		AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
            	
            	try{String url="jdbc:mysql://localhost:3306/vatest";
            	try{
            		Properties p=new Properties();
            		p.load(TestXUIDB1.class.getResourceAsStream("db.properties"));
            		driver=p.getProperty("driver",driver);
            		System.out.println(" >> Driver0" +driver);
            		url=p.getProperty("dburl");
            		user=p.getProperty("user");
            		passwd=p.getProperty("passwd");
            		confStatus="ok";
            		//NamedConnectionManager.
            		}
            		catch(Exception e)
            		{
            			
            			e.printStackTrace();
            		}
            		System.out.println(" >> Driver" +driver);
            		Class.forName(driver);
                // privileged code goes here, for example:
            	NamedConnectionManager nc=(NamedConnectionManager)NamedConnectionManager.getInstance();
            	
            	//nc.addConnection("test", "com.mysql.jdbc.Driver", url, user, passwd);

            	nc.addConnection("test", driver, url, user, passwd);
            	//nc.addConnection("test", "org.sqlite.JDBC", url, user, "");
            	//Class.forName("org.sqlite.JDBC");
               // Connection conn =
                 // DriverManager.getConnection("jdbc:sqlite:test.db");

            	ConnectionObject co=nc.getConnection("test");
                return null; // nothing to return
            	}	catch(Exception e1)
            	{
            		e1.printStackTrace();
            	}
            	return null;
            }


	});*/
		
		
		
	}
	
	public static void test1 (String args[]) throws Exception
	{
		NamedConnectionManager nc=(NamedConnectionManager)NamedConnectionManager.getInstance();
		
		nc.addConnection("test", "com.mysql.jdbc.Driver", "jdbc:mysql://localhost:3306/vatest", "root", "password");
		ConnectionObject co=nc.getConnection("test");
		
	//	DatabaseTableModel dt= new DatabaseTableModel();
		//dt.setName("tt");
		//dt.setSqlStatement("select * from houses", "test", true);
		
		/*DatabaseTableModel dt1= new DatabaseTableModel();
		dt.setName("tt");
		dt.setSqlStatement("select * from households ", "test", true);*/
		//System.out.println(dt.getValue());
		//dt.retrieve();
	/*	for(int i=0; i<dt.getNumChildren();i++)
		{
			 System.out.println(dt.get(i).get("address1")+" "+dt.get(i).get("address2"));
		}*/
	/*	XModel tt=dt.getValue(0);
		 System.out.println(dt.get("address1"));
		System.out.println(tt.get());
		dt.setSelectedRow(4);
		//dt.next();
		 tt=dt.getValue(2);
		 System.out.println(dt.get("address1"));
		System.out.println(tt.get());*/
		/*System.out.println(dt.hasMoreRows()+" "+dt.hasAutoId()+" "+dt.getNumChildren()+" "+dt.getNumAttributes()+" "+dt.getId()+" "+dt.getSelectedRow());*/
		
		//dt.set("test");
		FileWriter fout= new FileWriter("c:\\testdbfetch.xml");
		XModel out= new XBaseModel();
		XModel taskM=(XModel)out;
		getTasks(taskM,"12","");
		XModel dataM=(XModel)out.get("survey/surveydata");
	
		dataM =getAreas("12",dataM,"2");
	//	out.setId("13");
		XModel areaM= dataM.get(0);
	areaM=	getHouses("13",areaM);
		
		String house=areaM.get(1).getId();
		System.out.println(house);
		XModel houseM=areaM.get(1);
		houseM=getHouseholds("13",house,houseM);
		
		XDataSource.outputModel(fout, out);
		
		/*XModel houseMtest1=new XBaseModel();
		getProto("houses",houseMtest1);
		houseMtest1.setId("updatestatus");
		houseMtest1.set("houseno","99999");
		houseMtest1.set("enum_area","99");
		houseMtest1.set("address1","test345");
		houseMtest1.set("address2","test345");
		saveData("houses","houseno=99999",houseMtest1);
		*/
		System.out.println("Complete");
		
	}
	
public static  	String getTaskPath(String path)
	{
		return join(split("task0-1/task1-2/task3-3","-",0));
	}
	public static String join(Vector v)
	{
		String t="";
		for (int i=0;i<v.size();i++)
		{
			t+=(i==0?"":"/")+v.get(i).toString();
			
		}
		return t;
	}
	
	public static void testImport(String file) throws Exception
	{
		FileInputStream fin= new FileInputStream(file);
		DataInputStream din= new DataInputStream(fin);
		String line="";
		StringBuffer logs=new StringBuffer();
		while (line!=null)
		{
			line=din.readLine();
			logs.append(line+"\r\n");
			
		}
		System.out.println(logs);
		TestXUIDB1.importChangeLogs(logs.toString());
	}
	
	public static void main(String [] args) throws Exception
	
	{
		Vector keys=new Vector();
		keys.add("household");
		TestXUIDB1.testImport("e:/cmeuser1/CME/admin-2010-09-19-10-18-57-312-received.xml");
	//TestXUIDB1.createChangeLog("members", "household='1600101'",keys)	;
	System.in.read();
		XBaseModel xm=new XBaseModel();
		System.out.println(TestXUIDB1.getMaxIndivId("13", "16001", "1600101"));
		//TestXUIDB1.getSearch("AMI", xm);
		System.out.println(xm.getNumChildren()+" "+xm.get(0).getId());
		
		/*xm.setId("cme");
		xm.set("");
		xm.set("comments/1/x","4");
		xm.set("comments/1/y","3");
		TestXUIDB1.saveTree(xm, "keyvalue", "");*/
		//readTree(xm,"keyvalue","/cme");
	//	System.out.println(xm.getNumChildren()+" "+xm.get(0).getId()+" "+((XModel)xm.get("comments")).getNumChildren());;
	//Process p=	TestXUIDB1.getProcess(1);
	//p.states.transition();
	//((CMEStateMachine)(p.states)).currentState="assignment";
	//((CMEStateMachine)(p.states)).matchingResult=true;
		//TestXUIDB1.saveProcess(p);
			//TestXUIDB1.getProcess(1);
	//	TestXUIDB1.saveTask1("/task0/task0", null, null, null, null, new XBaseModel());
		/*System.out.println(split("task0-1/task1-2/task3-3","-",0));
		System.out.println(split("task0-1/task1-2/task3-3","-",1));
		XModel root= new XBaseModel();
		XModel test= (XModel)root.get("survey/healthcheckup/tasks/task0-1/task1-2/task3-3");
		System.out.println(getTaskPath(getPath(test,(XModel)root.get("survey/healthcheckup/tasks"))));*/
		
		/*XDataModel xm= new XDataModel();
		xm.setId("test");
		xm.set("test");
		xm.set("@area","13");
		xm.set("@house","16001");
		xm.set("@household","1600101");
		xm.set("@member","1600101001");
		saveInterview1(xm);
		xm.set("test1");
		saveInterview1(xm);
		XDataModel xt= new XDataModel();*/
	/*	XDataModel xt=TestXUIDB1.getDataM("data", "interview",  "13", "16001", "1600101", "1600101001");
		System.out.println(xt.get());
		XDataModel xtc=(XDataModel)xt.get("bp1/systolic");
		xtc.set("123");*/
		//TestXUIDB1.createMessage();
		String str="<l id='Tue Apr 13 17:26:00 IST 2010'>" +
				"		<dt id='dt' table='data' key=\"name='cookingPlace' and area = '22' and house = '16048' and household = '1604801' and member is null\">" +
				"		<d id='data' area='22' house='16048' household='1604801'  name='cookingPlace' value=' Choose Any One' /></dt>" +
				"</l>";
		//TestXUIDB1.importChangeLog(str);
	//TestXUIDB1.sendLogs("12","14");
		//TestXUIDB1.authenticateUser("", "");
		//System.out.println(TestXUIDB1.getLastChangeLog());
		
		//XBaseModel xm= new XBaseModel();
		//xm.set("area","test");
		//xm.set("surveyor","test");
		//xm.set("date","2010-01-01");
//		TestXUIDB1.saveConflictData("data_conflicts", "", xm);
		
		
	}
	public static void saveLogistics(XModel xm)throws Exception
	{
		xm.set("@name",xm.getId());
		Object path=xm.get("@path");
		String where="name='"+xm.getId()+"'";
		where+=" and path='"+path+"'";
		saveDataM("logistics",where,xm);
	}
	
	public static void saveTree(XModel root,String table,String parentPath)throws Exception
	{
		String key=parentPath+"/"+root.getId();
		String value=(String)root.get();
		if(value!=null)
			saveKeyValue( table,key, value);
		
		for(int i=0;i<root.getNumChildren();i++)
		{
			saveTree(root.get(i),table,key);
		}
	}
	public static void deleteKeyValue(String table,String key)throws Exception
	{
		
	//	String where="name='"+xm.getId()+"'";
		String where=" key1='"+key+"'";
		DatabaseTableModel dt= new DatabaseTableModel();
		dt.setupTable(table,"*",where,"test",true);
		//dt.retrieve();
		//if(dt.getNumChildren()>0)
		{
		ChangeLog.startLog(table,"delete",where,getCurrentUser());
		
		String qry ="delete from "+table+" where "+where;
		PreparedStatement ps=	dt.getTable().getPreparedStatement(qry);
		ps.execute();
		//dt.getTable().releasePreparedStatement(ps);
		ChangeLog.endLog();
		}
	}
	public static void saveKeyValue(String table,String key, String value)throws Exception
	{
		
	//	String where="name='"+xm.getId()+"'";
		String where=" key1='"+key+"'";
		DatabaseTableModel dt= new DatabaseTableModel();
		
		ChangeLog.startLog(table,where,getCurrentUser());
		
			
			
			dt.setupTable(table,"*",where,"test",true);
			//dt.setName("updatestatus");
			//dt.setId("updatestatus");
			//dt.setTagName("data");
			dt.retrieve();
			if(dt.getNumChildren()>0)
			{
				System.out.println(" total "+dt.getNumChildren());
				//dt.first();
				String qry ="update "+table+" set value1='"+value+"'";
				int count=0;
				System.out.println("Query is "+qry);
				ChangeLog.logField("value1", value);
				int updates=dt.executeUpdate(qry+ " where "+where );
				System.out.println("updates "+updates);
				
			}
			else{
				String s="insert into "+table;
				String flds="key1,value1";
				String values="'"+key+"','"+value+"'";
				int count=0;
				ChangeLog.logField("key1", key);
				ChangeLog.logField("value1", value);
				s+="("+flds+") VALUES("+values+")";
				
				System.out.println(" Debug sql "+s);
				
				
			PreparedStatement ps=	dt.getTable().getPreparedStatement(s);
			ps.execute();
			dt.getTable().releasePreparedStatement(ps);
			}
			ChangeLog.endLog();
	}
	
	public static void readTree(XModel root, String table,String path)
	{
		//KenList kl= new KenList(parentPath);
		//kl.get(kl.size()-1);
	//	root.set(getValue(table,path));
		getKeyValues(root,"keyvalue",path);
		
		
		
	}
	public  static String  getKeyValues(XModel xm,String table,String parentPath)
	{
		String where=" key1 like '"+parentPath+"/%' ";
		DatabaseTableModel dt= new DatabaseTableModel();
		
		dt.setupTable(table,"*",where,"test",true);
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		dt.retrieve();
		String keyFld="key1";
		String valFld="value1";
		if(dt.getNumChildren()>0)
		{
			
			for(int j=0; j<dt.getNumAttributes();j++)
			{
				String attrib=dt.getAttribName(j);
				String attrib1=attrib.toLowerCase();
				if(attrib1.equals("key1"))
						{
							keyFld=attrib;
						}
				if(attrib1.equals("value1"))
				{
					valFld=attrib;
				}
				
				
			}
			for(int i=0; i<dt.getNumChildren();i++)
			{
			
			
				String key=dt.get(i).get(keyFld).toString();
				String value=dt.get(i).get(valFld).toString();
				System.out.println(key+" "+parentPath);
				KenList kl =new KenList(key);
				KenList k2= new KenList(parentPath);
				String path1=kl.subset(k2.size(),kl.size()-1).toString();
				xm.set(path1,value);
				
				
			}
			
		}
		return null;
	}
	public static String  getValue(String table,String key)
	{
		String where=" key1='"+key+"'";
		DatabaseTableModel dt= new DatabaseTableModel();
		
		dt.setupTable(table,"*",where,"test",true);
		//dt.setName("updatestatus");
		//dt.setId("updatestatus");
		//dt.setTagName("data");
		dt.retrieve();
		if(dt.getNumChildren()>0)
		{
			for(int j=0;j<dt.getNumAttributes();j++)
			{
				String attrib=dt.getAttribName(j);
				String attrib1=attrib.toLowerCase();
			
				if(attrib1.equals("value1"))
					return dt.get(0).get(attrib).toString();
				
			
			}
			return dt.get(0).get("value1").toString();
		}
		return null;
	}
	public static void saveInterview1(XModel xm)throws Exception
	{
		xm.set("@name",xm.getId());
		Object area=xm.get("@area");
		Object house=xm.get("@house");
		Object household=xm.get("@household");
		Object member=xm.get("@member");
		String where="name='"+xm.getId()+"'";
		where+=" and "+(area==null?"area is null":"area = '"+area+"'");
		where+=" and "+(house==null?"house is null":"house = '"+house+"'");
		where+=" and "+(household==null?"household is null":"household = '"+household+"'");
		where+=" and "+(member==null?"member is null":"member = '"+member+"'");
		saveDataM("data",where,xm);
	}
	public static void saveHouse(String area,String id,XModel houseM) throws Exception
	{saveData("houses","area='"+area+"' and houseno='"+id+"'",houseM);
		
	}
	
	public static void saveHouseHold(String area,String house, String id,XModel hhM) throws Exception
	{saveData("households","area='"+area+"' and  houseno='"+house+"' and householdno='"+id+"'",hhM);
		
	}
	
	public static void saveMember(String area,String house, String hh,String id,XModel indvM) throws Exception
	{saveData("members","area='"+area+"' and houseno='"+house+"' and householdno='"+hh+"' idc='"+id+"'",indvM);
		
	}
	
	public static void saveVisitInfo(String area,String house, String hh,String idc,String team,String doneBy ,XModel visitM) throws Exception
	{
		
		saveData("members","area='"+area+"' and houseno='"+house+"' and  householdno='"+hh+"' and idc='"+idc+"' and team="+team+" and doneby="+doneBy,visitM);
		
	}
	public static void saveInterview(String area,String house, String hh,String idc,XModel interviewM) throws Exception
	{saveData("barshi_interview","enum_area='"+area+"' and house='"+house+"' and household='"+hh+"' and idc='"+idc+"'",interviewM);
		
	}
	public static void saveResponse(String area,String house, String hh,String idc,XModel interviewM) throws Exception
	{
		saveData("responsedetails","area='"+area+"' and house='"+house+"' householdno='"+hh+"' idc='"+idc+"'",interviewM);
		
	}
	public static void saveCommon(String area,String house, String hh,XModel ccM) throws Exception
	{saveData("barshi_cc","enum_area='"+area+"' and house='"+house+"' and household='"+hh+"' ",ccM);
		
	}
	public static void saveTask2(String taskPath,String surveyType,String area ,String house,String hh, String individual,XModel taskM) throws Exception
	{
		String table="tasks";
		
		String where="task='"+taskPath+"' and area="+area+" and house='"+house+"' and household='"+hh+"' and member='"+individual+"' and survey_type='"+surveyType+"' and status != 1";
	
		XModel dataM=taskM;
		
	//	TestXUIDB1.saveData1(table, where, dataM);
	}
	
	public static void save(XModel xM,String area, String house, String hh, String idc) throws Exception
	{
		
	System.out.println("/*********** Save Called "+xM.getId()+"***/");
		if(xM.getId().equals("characterstics"))
		{
			TestXUIDB1.saveCommon(area, house, hh,  xM);
		}
		if(xM.getId().equals("interview"))
		{
			TestXUIDB1.saveInterview(area, house, hh, idc, xM);
		}
		if(xM.getId().equals("responsedetails"))
		{
			//TestXUIDB1.saveCommon(area, house, hh, idc, xM);
		}
		
	}
	
	public static void get(XModel xM,String area, String house, String hh, String idc) throws Exception
	{
		//StringTokenizer st= new StringTokenizer
	System.out.println("/*********** Save Called "+xM.getId()+"***/");
		if(xM.getId().equals("characterstics"))
		{
			xM=TestXUIDB1.getCC(hh, house, area,xM);
		}
		if(xM.getId().equals("interview"))
		{
			xM=TestXUIDB1.getInterview(idc, hh, house, area,xM);//saveInterview(area, house, hh, idc, xM);
		}
		if(xM.getId().equals("responsedetails"))
		{
			//TestXUIDB1.saveCommon(area, house, hh, idc, xM);
		}
		
	}
	
	public static XModel get1(String path,String area, String house, String hh, String idc) throws Exception
	{
		
		StringTokenizer st= new StringTokenizer(path,"/");
		String name=path;
		
		while(st.hasMoreTokens())
		{
		name=st.nextToken();
		}
	System.out.println("/*********** Get Called "+name+"***/");
	XDataModel xM=TestXUIDB1.getDataM("data", name, area, house, hh, idc);
	return xM;
		/*if(tmp.equals("characterstics"))
		{
			//getCC(hh, house, area,xM);
		}
		if(xM.getId().equals("interview"))
		{
			xM=TestXUIDB1.getInterview(idc, hh, house, area,xM);//saveInterview(area, house, hh, idc, xM);
		}
		if(xM.getId().equals("responsedetails"))
		{
			//TestXUIDB1.saveCommon(area, house, hh, idc, xM);
		}*/
		
	}
	
	public static void authenticateUser(String user , String passwd)
	{
		DatabaseTableModel dtm= DatabaseTableModel.getTable("team");
		///dtm.setName("user");
		
		dtm.first();
		
	}
	


}
